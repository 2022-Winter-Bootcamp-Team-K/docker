#배포용, for production
version: '3.8'

volumes:
  mysql_data:
  redisdata:
  static_volume:
  media_volume:
  build_folder:
  prometheus_data: {}
  grafana_data: {}

services:
  mysqldb:
    build: ./backend/db
    env_file:
      - './backend/db/db.env'
    ports:
      - '3307:3306'
    volumes:
      - mysql_data:/var/lib/mysql
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3306']
      interval: 10s
      timeout: 15s #체크하는데 15초 이상 걸리면 체크 실패했다고 판단
      retries: 5 #실패를 5번까지 체크해서 다 실패하면 unhealty판단
      start_period: 10s

  backend:
    build: ./backend/backend
    command: >
      bash -c "python wait_mysql.py &&
               python manage.py makemigrations &&
               python manage.py migrate &&
               python manage.py loaddata fixture.json &&
               gunicorn backend.wsgi:application --bind 0.0.0.0:8080" &&

    ports:
      - '8080:8080'
    volumes:
      - ./backend/backend:/app
    depends_on:
      - mysqldb
    links:
      - mysqldb
    expose:
      - 8080

  redis:
    container_name: redis
    image: redis:latest
    hostname: redis
    ports:
      - '6379:6379'
    volumes:
      - 'redisdata:/data'

  nginx:
    build: ./nginx
    ports:
      - '80:3000'
    volumes:
      - build_folder:/var/www/frontend
    depends_on:
      - backend
      - frontend

  frontend:
    container_name: client
    build:
      context: ./frontend
      dockerfile: dockerfile.prod
    volumes:
      - ./frontend/:/frontend
      - build_folder:/frontend/build
      - ./frontend/node_modules/:/frontend/node_modules
    tty: true

  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:latest #아마 될거야
    environment:
      - RABBITMQ_USER=guest
      - RABITMQ_PASSWORD=guset #막막하네
    ports:
      - '5672:5672' #rabbitMQ default port
      - '15672:15672' #UI를 위한 port 이건 뭐지?
    expose: #이건 뭐더라?
      - '15672'

  celery_worker:
    container_name: celery_worker
    build:
      context: ./backend/backend
    ports: []
    depends_on:
      mysqldb:
        condition: service_healthy
    command: sh -c "celery -A backend worker --loglevel=info"
    tty: true

  prometheus:
    container_name: prometheus
    image: prom/prometheus:latest
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    volumes:
      - ./backend/prometheus:/etc/prometheus/
      - ./backend/cprometheus.yml:/prometheus/prometheus.yml:ro
    ports:
      - 9090:9090

  node-exporter:
    container_name: node-exporter
    image: prom/node-exporter
    ports:
      - 9100:9100

  cadvisor: #docker health check 해보기, 컨테이너 순서를 보장
    container_name: cadvisor
    image: gcr.io/cadvisor/cadvisor:v0.46.0 #zcube/cadvisor
    privileged: true
    volumes: #빠진 volumes 찾아보기
      - /var/run/docker.sock:/var/run/docker.sock:ro # 이 부분이 없으면 cadvisor에서 docker container를 잡지 못하는 것 같음.
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro # cadvisor 배포 깃허브 페이지를 보고 추가
      - /etc/machine-id:/etc/machine-id:ro # Failed to get system UUID: open /etc/machine-id: no such file or directory 해결책
    ports:
      - 8081:8080
    devices:
      - /dev/kmsg:/dev/kmsg

  grafana:
    container_name: grafana
    image: grafana/grafana
    environment:
      GF_INSTALL_PLUGINS: 'grafana-clock-panel,grafana-simple-json-datasource'
      GF_AUTH_ANONYMOUS_ENABLED: 'true'
      GF_AUTH_ANONYMOUS_ORG_ROLE: 'Admin'
      GF_AUTH_DISABLE_LOGIN_FORM: 'true'
    volumes:
      - grafana_data:/var/lib/grafana
      - ./backend/grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
      - ./backend/grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
    ports:
      - 3001:3000
    restart: always
